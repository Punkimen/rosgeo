const fs=require("fs"),cpx=require("cpx"),path=require("path"),execa=require("execa"),Listr=require("listr"),chalk=require("chalk"),semver=require("semver"),inquirer=require("inquirer"),pkg=require("../package.json"),bowerPkg=require("../bower.json"),joinRoot=path.join.bind(path,__dirname,".."),BUILD_DIR=joinRoot("build");function checkBranch(){return execa.shell("git rev-parse --abbrev-ref HEAD").then((e=>{if("master"!==e.stdout)throw new Error(chalk.bold.red("Please run release script on master branch."))}))}function compareWithDevelop(){return execa.shell("git rev-list --count master..develop").then((e=>{if("0"!==e.stdout)throw new Error(chalk.bold.red("master branch is not up-to-date with develop branch"))}))}function checkWorkingTree(){return execa.shell("git status -s").then((e=>{if(""!==e.stdout)throw new Error(chalk.bold.red("Please commit local changes before releasing."))}))}function prompt(){const e=[{type:"list",name:"version",message:"Which type of release is this?",choices:["patch","minor","major","beta"].map((e=>{const r="beta"===e?semver.inc(pkg.version,"prerelease","beta"):semver.inc(pkg.version,e);return{name:`${e} ${chalk.dim.magenta(r)}`,value:r}})).concat([new inquirer.Separator,{name:"others",value:null}])},{type:"input",name:"version",message:`Please enter the version (current: ${pkg.version}):`,when:e=>!e.version,validate:e=>semver.valid(e)?!!semver.gt(e,pkg.version)||`New version must be greater than ${pkg.version}.`:"Please enter a valid semver like `a.b.c`."},{type:"confirm",name:"confirm",default:!1,message:e=>`Releasing version:${e.version} - are you sure?`}];return inquirer.prompt(e)}function runTask(e){e.confirm||process.exit(0);return new Listr([{title:"Create bundle",task:()=>execa.shell("npm run bundle",{env:{SCROLLBAR_VERSION:e.version}})},{title:"Compile TypeScript",task:async()=>{await execa.shell("npm run compile");const r=`${BUILD_DIR}/index.js`,t=fs.readFileSync(r,"utf8");fs.writeFileSync(r,t.replace("__SCROLLBAR_VERSION__",JSON.stringify(e.version)))}},{title:`Bump Bower version: ${pkg.version} -> ${e.version}`,task:()=>{bowerPkg.version=e.version,fs.writeFileSync(joinRoot("bower.json"),JSON.stringify(bowerPkg,null,2))}},{title:"Commit changes",task:async()=>{await execa.shell("git add --all"),await execa.shell(`git commit -m "[build] ${e.version}"`)}},{title:`Bump NPM version: ${pkg.version} -> ${e.version}`,task:()=>execa.shell(`npm version ${e.version}`)},{title:"Copy files to working directory",task:()=>{cpx.copySync(joinRoot("dist/**"),`${BUILD_DIR}/dist`),cpx.copySync(joinRoot("package.json"),BUILD_DIR),cpx.copySync(joinRoot("README.md"),BUILD_DIR),cpx.copySync(joinRoot("CHANGELOG.md"),BUILD_DIR),cpx.copySync(joinRoot("LICENSE"),BUILD_DIR)}},{title:`Publish ${e.version}`,task:()=>semver.prerelease(e.version)?execa.shell(`cd ${BUILD_DIR} && npm publish --tag beta`):execa.shell(`cd ${BUILD_DIR} && npm publish`)},{title:"Push to GitHub",task:async()=>{await execa.shell("git push"),await execa.shell("git push --tags")}}]).run()}checkBranch().then(checkWorkingTree).then(compareWithDevelop).then(prompt).then(runTask).catch((e=>{console.error(e.message),process.exit(1)}));